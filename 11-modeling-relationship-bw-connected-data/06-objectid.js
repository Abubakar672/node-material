// we have noticed when we store a documen in mongodb, mongodb assign it a long string id like
// _id: "603b71f27897fd03fd735f82"
// here we have 24 characters and every two characters represent a byte.  so essentially we have 
// 12 bytes     // to uniquely identifying the document in mongodb.

//4 bytes // first 4 bytes represents the document time stamp. the time in which the document is created. we can also extract time from this id. with this 4 bytes we dont have to create a propert "created at" in our app. because mongodb automatically include it in this id. by using .sort("_id") we can sort the document as they created

// 3 bytes ..//  the next 3 bytes represents machine identifier. so two different machines will have two different identifiers

// 2 bytes... // the next two bytes represents the process identifier means if we create two documents at the same time on the same machine then these 2 bytes will be different

// 3 bytes ///  finally the last 3 bytes represents the counter. means if we are on the same machine, at the same second, at the same process generate two documents. there counter number will be different.. so this uniqueness of id is very helpfull for each document traces. so its a very very very low chance that we create two documents which have same id.

// 1 byte = 8bits  => 2^8 = 256
// last 3 bytes are counter
// 2^24 = 16 million. means if at the same second, same machine, same process  we can generate more than 16 million documents. after this this counter will overflow. its a very unlike scnerio. so this id is almost uniqe not 100%. in mongodb how mongodb give the surity that every id is uniqe?
// in mysql or sql server every next row has auto increment id that gives the surity of uniqness. this this auto increment gives the idea of uniqness but it hurts the scalability.
// in mongodb this idea of generating identifier for each document is not the ideo of mongodb itself. its actually generated by mongodb driver.
// Driver -> mongodb /// the mongodb driver talks to the mongodb. so we dont have to wait for mongodb to generate the ne unique identifier and thats why applications build on the top of mongodb are highly scalable. we have several instances of mongodb and we dont have to talk to a central place to get a uniq identifier. the driver will generate almost unique identifier using the 12 bytes when we build an appklication with node and express using mongoose. mongoose is an abstraction over mongodb driver. when we create a  new object or a document mongoose talks to mongodb driver to generate a new id. and we can also generate an explicitly generate an id if we want to. like

const mongoose = require('mongoose')
const id = new mongoose.Types.ObjectId()
console.log(id);
console.log(id.getTimestamp());// get time stamp
// we also have a static method of objectId class to validate the objectIds.
const isValid = mongoose.Types.ObjectId.isValid("603bdc2ebb02d41fa0ee4ebf")
console.log(isValid)
